Full Syntax of Data Cleaning Process from PostgreSQL:

## Cleaning the data for FILM and CUSTOMER  tables.

--Tables in use [FILM, CUSTOMER]
SELECT * FROM film 
SELECT * FROM customer
----------------------------------------------------------------------------

[FILM TABLE]

--Find non-uniform data using DISTINCT 
SELECT DISTINCT film_id, title, description, release_year, language_id, 
                               rental_duration, rental_rate, length, replacement_cost,
                               rating, last_update, special_features, fulltext
FROM film;

--Shows only those records that duplicate (based on all columns from [film table])
SELECT film_id, title, description, release_year, language_id,
              rental_duration, rental_rate, length, replacement_cost,
              rating, last_update, special_features, fulltext
FROM film
GROUP BY film_id, title, description, release_year, language_id,
                    rental_duration, rental_rate, length, replacement_cost, 
	     rating, last_update, special_features, fulltext
HAVING COUNT(*) >1;

--Identify and count duplicate rows based on film_id
SELECT film_id, COUNT(*) AS duplicate_count
FROM film
GROUP BY film_id
HAVING COUNT(*) > 1;

--Check for missing values in the title column
SELECT * 
FROM film
WHERE title IS NULL;

--Check for missing values in the description column
SELECT * 
FROM film
WHERE description IS NULL;

--Check for missing values in the release_year column
SELECT * 
FROM film
WHERE release_year IS NULL;

--Check for missing values in the language_id column
SELECT * 
FROM film
WHERE language_id IS NULL;

--Check for missing values in the rental_duration column
SELECT * 
FROM film
WHERE rental_duration IS NULL;

--Check for missing values in the rental_rate column
SELECT * 
FROM film
WHERE rental_rate IS NULL;

--Check for missing values in the length column
SELECT * 
FROM film
WHERE length IS NULL;

--Check for missing values in the replacement_cost column
SELECT * 
FROM film
WHERE replacement_cost IS NULL;

--Check for missing values in the rating column
SELECT * 
FROM film
WHERE rating IS NULL;

--Check for missing values in the last_update column
SELECT * 
FROM film
WHERE last_update IS NULL;

--Check for missing values in the special_features column
SELECT * 
FROM film
WHERE special_features IS NULL;

--Check for missing values in the fulltext column
SELECT * 
FROM film
WHERE fulltext IS NULL;
----------------------------------------------------------------------------

[CUSTOMER TABLE]

--Find non-uniform data(based on all columns from [customer table])
SELECT DISTINCT customer_id, store_id, first_name, last_name, email, 
                address_id, activebool, create_date, last_update, active
FROM customer
ORDER BY customer_id;

--Identify and count duplicate rows based on customer_id
SELECT customer_id, COUNT(*) AS duplicate_count
FROM customer
GROUP BY customer_id
HAVING COUNT(*) > 1;

--Check for missing values in the customer_id column
SELECT *
FROM customer
WHERE customer_id IS NULL;

--Check for missing values in the store_id column
SELECT *
FROM customer
WHERE store_id IS NULL;

--Check for missing values in the first_name column
SELECT *
FROM customer
WHERE first_name IS NULL;

--Check for missing values in the last_name column
SELECT *
FROM customer
WHERE last_name IS NULL;

--Check for missing values in the email column
SELECT *
FROM customer
WHERE customer_id IS NULL;

--Check for missing values in the address_id column
SELECT *
FROM customer
WHERE address_id IS NULL;

--Check for missing values in the activebool column
SELECT *
FROM customer
WHERE activebool IS NULL;

--Check for missing values in the create_date column
SELECT *
FROM customer
WHERE create_date IS NULL;

--Check for missing values in the last_update column
SELECT *
FROM customer
WHERE last_update IS NULL;

--Check for missing values in the active column
SELECT *
FROM customer
WHERE active IS NULL;
----------------------------------------------------------------------------

[CATEGORY TABLE]

--Identify missing genres (subquery)

SELECT name AS genre_not_included
FROM Category
WHERE category_id NOT IN 
   (SELECT F.category_id
    FROM Payment A
    JOIN Rental B ON A.rental_id = B.rental_id
    JOIN Inventory C ON B.inventory_id = C.inventory_id
    JOIN Film D ON C.film_id = D.film_id
    JOIN Film_Category E ON D.film_id = E.film_id
    JOIN Category F ON E.category_id = F.category_id
    GROUP BY F.category_id)
